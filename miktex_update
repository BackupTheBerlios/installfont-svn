#!/bin/bash
#
# miktex_update
#
# synchronize the local MiKTeX repository (optional),
# update installed packages and install new packages
# (tested with MiKTeX 2.7) v0.84 (22.06.2008)
# (C) Josef Kleber 2008  License: LPPL
# See http://latex.josef-kleber.de/miktex_update.htm or
#     http://latex.josef-kleber.de/en_miktex_update.htm
# for more information
#
VERSION="v0.84 (22.06.2008)"
REPO=E:/MiKTeXRepRsync
REPOSUBDIR=/packages 
# don't change REPOSUBDIR!!
RSYNCURL=rsync://www.ctan.org/SYSTEMS/win32/miktex/tm/packages
RSYNCOPT1='-av'
RSYNCOPT2='--progress --partial'
ODIR=`pwd`
UPDATEMODE="default"
ARGREPO="default"
VERBOSE=""
UPDLIST="update.txt"
INSTLIST="install.txt"
ERROR="error.txt"
UPDATE="true"
INSTALL="true"
NOLIST="false"
typeset -i STEP=0
#
function printHelp()
{
  echo -e \
          "`basename $0` [options] [--local | --online [--repository <URL/DIR Repository>]]\n"\
		  " updates your MiKTeX installation and installs new packages\n\n"\
		  " Options:\n\n"\
		  " -h, --help  will print this help statement\n\n"\
		  " -V, --version  will print the version number of `basename $0`\n\n"\
		  " -b, --broadband  will optimize the text output in LOCAL mode for broadband\n"\
		  "                  download. Support for partial package download will be\n"\
		  "                  switched off!\n\n"\
		  " -v, --verbose  will lead to a more verbose text output in the process of\n"\
		  "                updating and installing new packages\n\n"\
		  " -n, --nolist  will not print the list of updateable and/or installable\n"\
		  "               packages\n\n"\
		  " -u, --update  will only update already installed packages\n\n"\
		  " -i, --install  will only install new respectively uninstalled packages\n\n"\
		  " -l, --local  will set the update mode to LOCAL and syncronize the local\n"\
		  "              repository (default or specified with option -r) with CTAN\n\n"\
		  " -o, --online  will set the update mode to ONLINE. You have to specify an\n"\
		  "               online repository with option -r. Without doing so a\n"\
		  "               repository URL from the MiKTeX server network will be echoed\n\n"\
		  " -r, --repository  specifies the local or online repository for updating\n"\
		  "                   and installing new packages\n\n"\
		  " See http://latex.josef-kleber.de/miktex_update.htm or\n"\
          "     http://latex.josef-kleber.de/en_miktex_update.htm\n"\
          " for more information"
  exit 0;
}
function printVersion()
{
  echo "This is version $VERSION of `basename $0`"
  exit 0;
}
#
if [ $# -eq 0 ]
then
  echo -e "`basename $0`: Could not find command line arguments.\nUse the '--help' option for explanation."
  exit 1
fi
#
LONGOPTS="help,broadband,verbose,version,nolist,local,online,update,install,repository:"
SHORTOPTS="hbVvnlouir:"
ARGS=`getopt -l "$LONGOPTS" "$SHORTOPTS" "$@" 2>$ERROR`
if [ $? -ne 0 ]
then
  echo -e "`basename $0`: Could not process command line arguments.\nUse the '--help' option for explanation."
  echo -e "ERROR:\n`cat $ERROR`"
  exit 1
fi
#
eval set -- "$ARGS"
#
while [ $# -gt 0 ]; do
  ARG=$1
  case "$ARG" in
    --help|-h)       shift; printHelp;;
	--broadband|-b)  shift; RSYNCOPT2="";;
	--verbose|-v)    shift; VERBOSE="--verbose";;
	--version|-V)    shift; printVersion;;
	--nolist|-n)     shift; NOLIST="true";;
    --local|-l)      shift; UPDATEMODE="LOCAL";;
	--online|-o)     shift; UPDATEMODE="ONLINE";;
	--update|-u)     shift; INSTALL="false";;
	--install|-i)    shift; UPDATE="false";;
	--repository|-r) shift; ARGREPO="$1"; shift;;
	--)              shift; break;;
	*)               break;;
  esac
done
#
echo
echo
echo " MiKTeX Update"
echo "---------------"
echo
if [ $UPDATEMODE = "LOCAL" ]
then
  if [ $ARGREPO != "default" ]
  then
    REPO=${ARGREPO}${REPOSUBDIR}
  else
    REPO=${REPO}${REPOSUBDIR}
  fi
  ((STEP++))
  echo "$STEP) Synchronize local repository with CTAN"
  echo
  if [ ! -d $REPO ]
  then
    mkdir -p $REPO 2>>$ERROR
  fi
  cd $REPO
  cd ..
  if [ -a $ERROR ]
  then
    rm $ERROR
  fi
  RSYNCOPT="$RSYNCOPT1 $RSYNCOPT2"
  rsync $RSYNCOPT $RSYNCURL . 2>>$ERROR
  if [ $? -eq 0 ]
  then
    echo
  fi
elif [ $UPDATEMODE = "ONLINE" ]
then
  if [ $ARGREPO = "default" ]
  then
    echo -e "You did not specify a repository.\nPlease add e.g.(random pick): --repository `mpm --pick-repository-url`"
	exit 1
  else
    REPO=$ARGREPO
	((STEP++))
	echo "$STEP) Set online repository: $REPO"
    echo
  fi
else
  echo -e "`basename $0`: You did not specify an UPDATE MODE.\nUse the '--help' option for explanation."
  exit 1
fi
mpm --set-repository=$REPO 2>>$ERROR
((STEP++))
echo "$STEP) Update DB"
echo
mpm --update-db 2>>$ERROR;
if [ $UPDATE = "true" ]
then
  mpm --find-updates >$UPDLIST 2>>$ERROR
  if [ $NOLIST = "false" ]
  then
    ((STEP++))
    echo "$STEP) List of updatable packages:"
    echo
    if [ "`cat $UPDLIST | head -1 | cut -c1-5`" = "There" ]
    then
      echo "   There are currently no updates available."
      echo
    else
      cat $UPDLIST
      echo
    fi
  fi
  ((STEP++))
  echo "$STEP) Update installed packages"
  echo
  if [ "`cat $UPDLIST | head -1 | cut -c1-5`" = "There" ]
  then
    echo "   There are currently no updates available."
    echo
  else    
    mpm --update $VERBOSE 2>>$ERROR
  fi
fi
if [ $INSTALL = "true" ]
then
  mpm --list | grep -e '- ' | cut -c22- >$INSTLIST 2>>$ERROR
  if [ $NOLIST = "false" ]
  then
    ((STEP++))
    echo "$STEP) List of installable packages:"
	echo
    if [ -s $INSTLIST ]
    then
      cat $INSTLIST
	  echo
    else
      echo "   There are currently no new packages available."
	  echo
    fi
  fi
  ((STEP++))
  echo "$STEP) Install new packages"
  echo
  if [ -s $INSTLIST ]
  then
    mpm --install-some=$INSTLIST $VERBOSE 2>>$ERROR
  else
    echo "   There are currently no new packages available."
	echo
  fi
fi
if [ $UPDATE = "true" ]
then
  rm $UPDLIST
fi
if [ $INSTALL = "true" ]
then
  rm $INSTLIST
fi
echo
if [ `ls -al | grep $ERROR | tr -s ' ' | cut -f5 -d ' '` = "0" ]
then
  rm $ERROR
  echo "Done!"
else
  echo "ERROR list:"
  echo
  cat $ERROR
fi
echo
cd $ODIR
exit 0